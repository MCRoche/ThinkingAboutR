[["index.html", "Thinking About R I’ve Been Busy Thinking About…", " Thinking About R MaryClare Roche 2021-04-29 I’ve Been Busy Thinking About… R. There are many, many, many wonderful places on the internet you can learn about R. Personally, I’m a big fan of listening to someone talk me through an example of what they’re doing on YouTube. RStudio also has plenty of cheatsheets for all sorts of topics and packages. So why this guide? Who is it for? The point of the guide is an introduction in how to think about R. It’s much easier to communicate with someone when you know how they will interpret what you’re saying. The same is true with robots. If you know how R thinks, you’ll understand where the hiccups in your code are coming from much faster. This guide is designed for a specific audience: the learning on the job audience. You know enough to get by most of the time, but you constantly feel like you’re playing catch up. I come from an academic background. I had no formal training in R until the week-long short course a week before graduate school began. That course gave me the tools to survive the initial onslaught of statistical assignments requiring R, but I was left to discover and learn the plethora of R tools to aid in research on my own. Over the years I’ve come to a deeper understanding of R that I would have loved to have earlier in the process. This guide is an attempt to share that understanding and hopefully it will find you relatively early in your R journey. If you’ve taken a course on R, or are a computer scientist, this guide is not for you. If you are lightly familiar with programming or the concept of R, maybe you already know MATLAB or have made a few graphs with R, and need to know more for your projects, hopefully this guide will help. This guide is not meant to be used as a reference manual for specific commands. I will not be reviewing the calculator nature of R. This guide to meant to give you insight into how R thinks, so you can communicate with it more effectively. The goal is to help you understand just what the hell R is doing as well as how to effectively troubleshoot your code and Google your problems. "],["what-are-thoooose.html", "Chapter 1 What are thoooose? 1.1 Objects! 1.2 Functions", " Chapter 1 What are thoooose? 1.1 Objects! EVERYTHING is an object in R! R is a object-orientated programming language. This refers to the way R uses memory. It stores your information as an object that can be called upon later. 1.1.1 Creating Objects As the user, you create and manipulate objects whenever you use R. Objects are created whenever you save an output, e.g., whenever you use either assignment symbol (= or &lt;- ). Here are some objects: # A string: a &lt;- &quot;a&quot; # A numeric: b = 2 # A vector: c &lt;- c(1,2,3) # A data frame: d = data.frame(x = 1, y = 1:10) Even though a, b, c, and d are different “things”, they are all objects to R. The symbols &lt;- and = act as assignment symbols. They both achieve the same thing: they assign some output a name. Now you can refer to that name whenever you want that output. What is output exactly? Output is what will show up in your console after you type something there and hit enter. If you “a”, the console will return “a”. If you type 2, the console will return 2. So on and so forth. Assigning that output a name creates an object of that output. Creating an object is the same as writing a paper, clicking “Save As…” and naming your paper. Now, every time you click on the name of your paper, your paper opens. If you don’t “Save As…”, your paper will be gone. When you type the name of your object into the R console, the output will appear. If you don’t give the output a name, you’ll have to create that object from scratch if you want to see it again. Let’s use an object. From the code above, instead of typing “2” all the time, now you can just type b. c2 &lt;- c(1,b,3) identical(c,c2) ## [1] TRUE In the example above, I created a new object called c2 which looks just like the vector c except I replaced “2” with the object b. To our human brain, c and c2 just look similar. To R’s brain, they are identical. As far as R is concerned, b IS “2”. This example may seem frivolous, but the underlying concepts are powerful. There are b important takeaways here: Everything is an object. Once you create an object, to R, the object IS what the output you saved to it. 1.2 Functions Beyond simply being object-orientated, R is a functional object-orientated language. I know what you’re thinking. “Functional? I’m here because 9 times out of 10 R is not functional.” In R’s case, “functional” refers the creation and use of functions. "],["the-pool-of-tears.html", "Chapter 2 The pool of tears", " Chapter 2 The pool of tears "]]
